{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Item, Money } from 'data/Classes/Order';\nimport { useState, useMemo } from 'react';\nexport const useCart = () => {\n  _s();\n\n  // localStorage.removeItem('cart');\n  const [cart, setCart] = useState(() => {\n    const storagedArr = JSON.parse(localStorage.getItem('cart') || '[]');\n    return storagedArr.map(({\n      id,\n      name,\n      unit_amount: {\n        value\n      } = {},\n      description,\n      quantity,\n      img,\n      category\n    }) => {\n      const unit_amount = new Money(value);\n      return new Item({\n        id,\n        name,\n        unit_amount: unit_amount,\n        description,\n        quantity,\n        img,\n        category\n      });\n    });\n  });\n  const handlers = useMemo(() => ({\n    addItem: item => {\n      if (item) setCart(prev => {\n        const newCart = [...prev, item];\n        localStorage.setItem('cart', JSON.stringify(newCart));\n        return newCart;\n      });\n    },\n    removeItem: index => {\n      setCart(prev => {\n        const newCart = prev.filter((_, i) => i !== index);\n        localStorage.setItem('cart', JSON.stringify(newCart));\n        return newCart;\n      });\n    },\n    changeItemQuantity: (index, newQuantity) => {\n      return null;\n    }\n  }), []);\n  return [cart, handlers];\n};\n\n_s(useCart, \"8DX0wZj26YnbI0jiAcwl8hpr53I=\");","map":{"version":3,"sources":["/Users/Cudo/Desktop/desafio2-hiring-coders/src/Hooks/useCart.tsx"],"names":["Item","Money","useState","useMemo","useCart","cart","setCart","storagedArr","JSON","parse","localStorage","getItem","map","id","name","unit_amount","value","description","quantity","img","category","handlers","addItem","item","prev","newCart","setItem","stringify","removeItem","index","filter","_","i","changeItemQuantity","newQuantity"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,oBAA5B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,MAAM;AACrC,UAAMK,WAQJ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,IAA3C,CARL;AAUA,WAAOJ,WAAW,CAACK,GAAZ,CACL,CAAC;AACCC,MAAAA,EADD;AAECC,MAAAA,IAFD;AAGCC,MAAAA,WAAW,EAAE;AAAEC,QAAAA;AAAF,UAAY,EAH1B;AAICC,MAAAA,WAJD;AAKCC,MAAAA,QALD;AAMCC,MAAAA,GAND;AAOCC,MAAAA;AAPD,KAAD,KAQM;AACJ,YAAML,WAAW,GAAG,IAAId,KAAJ,CAAUe,KAAV,CAApB;AACA,aAAO,IAAIhB,IAAJ,CAAS;AACda,QAAAA,EADc;AAEdC,QAAAA,IAFc;AAGdC,QAAAA,WAAW,EAAEA,WAHC;AAIdE,QAAAA,WAJc;AAKdC,QAAAA,QALc;AAMdC,QAAAA,GANc;AAOdC,QAAAA;AAPc,OAAT,CAAP;AASD,KApBI,CAAP;AAsBD,GAjC+B,CAAhC;AAmCA,QAAMC,QAAQ,GAAGlB,OAAO,CACtB,OAAO;AACLmB,IAAAA,OAAO,EAAGC,IAAD,IAA4B;AACnC,UAAIA,IAAJ,EACEjB,OAAO,CAAEkB,IAAD,IAAuB;AAC7B,cAAMC,OAAO,GAAG,CAAC,GAAGD,IAAJ,EAAUD,IAAV,CAAhB;AACAb,QAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6BlB,IAAI,CAACmB,SAAL,CAAeF,OAAf,CAA7B;AACA,eAAOA,OAAP;AACD,OAJM,CAAP;AAKH,KARI;AASLG,IAAAA,UAAU,EAAGC,KAAD,IAAmB;AAC7BvB,MAAAA,OAAO,CAAEkB,IAAD,IAAuB;AAC7B,cAAMC,OAAO,GAAGD,IAAI,CAACM,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKH,KAA5B,CAAhB;AACAnB,QAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6BlB,IAAI,CAACmB,SAAL,CAAeF,OAAf,CAA7B;AACA,eAAOA,OAAP;AACD,OAJM,CAAP;AAKD,KAfI;AAgBLQ,IAAAA,kBAAkB,EAAE,CAACJ,KAAD,EAAgBK,WAAhB,KAAwC;AAC1D,aAAO,IAAP;AACD;AAlBI,GAAP,CADsB,EAqBtB,EArBsB,CAAxB;AAwBA,SAAO,CAAC7B,IAAD,EAAOgB,QAAP,CAAP;AACD,CA9DM;;GAAMjB,O","sourcesContent":["import { Item, Money } from 'data/Classes/Order';\nimport { useState, useMemo } from 'react';\n\nexport const useCart = () => {\n  // localStorage.removeItem('cart');\n  const [cart, setCart] = useState(() => {\n    const storagedArr: Array<{\n      id: string;\n      name: string;\n      unit_amount: { value: number };\n      description: string;\n      quantity: number;\n      img: string;\n      category: string;\n    }> = JSON.parse(localStorage.getItem('cart') || '[]');\n\n    return storagedArr.map(\n      ({\n        id,\n        name,\n        unit_amount: { value } = {},\n        description,\n        quantity,\n        img,\n        category,\n      }) => {\n        const unit_amount = new Money(value as number);\n        return new Item({\n          id,\n          name,\n          unit_amount: unit_amount,\n          description,\n          quantity,\n          img,\n          category,\n        });\n      }\n    );\n  });\n\n  const handlers = useMemo(\n    () => ({\n      addItem: (item: Item | undefined) => {\n        if (item)\n          setCart((prev: Array<Item>) => {\n            const newCart = [...prev, item];\n            localStorage.setItem('cart', JSON.stringify(newCart));\n            return newCart;\n          });\n      },\n      removeItem: (index: number) => {\n        setCart((prev: Array<Item>) => {\n          const newCart = prev.filter((_, i) => i !== index);\n          localStorage.setItem('cart', JSON.stringify(newCart));\n          return newCart;\n        });\n      },\n      changeItemQuantity: (index: number, newQuantity: number) => {\n        return null;\n      },\n    }),\n    []\n  );\n\n  return [cart, handlers] as const;\n};\n"]},"metadata":{},"sourceType":"module"}